/**
 * SimpleSpeedTest - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ LibreSpeed
 * –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 * –∏ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏
 * 
 * –ò—Å—Ç–æ—á–Ω–∏–∫: https://github.com/librespeed/speedtest
 */

// –°–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞
export enum TestState {
  WAITING = 0,  // –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
  PING = 1,     // –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –ø–∏–Ω–≥–∞
  DOWNLOAD = 2, // –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
  UPLOAD = 3,   // –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏
  FINISHED = 4, // —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
  ABORTED = 5   // —Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω
}

// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
export interface SpeedTestProgress {
  pingStatus: string;
  jitterStatus: string;
  dlStatus: string;
  ulStatus: string;
  pingProgress?: number;
  dlProgress?: number;
  ulProgress?: number;
  testState: TestState;
}

// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞
export interface SpeedTestSettings {
  // URL –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  url_dl: string;
  url_ul: string;
  url_ping: string;
  url_getIp?: string;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
  test_order?: string;      // –ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: P_D_U (ping, download, upload)
  time_dl_max?: number;     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  time_ul_max?: number;     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  time_auto?: boolean;      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ—Å—Ç–∞
  count_ping?: number;      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø–∏–Ω–≥–∞
  xhr_dlMultistream?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  xhr_ulMultistream?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏
  xhr_ignoreErrors?: number;  // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ XHR
  xhr_dlUseBlob?: boolean;    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Blob –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  xhr_ul_blob_megabytes?: number; // –†–∞–∑–º–µ—Ä –±–ª–æ–±–∞ –≤ –ú–ë –¥–ª—è —Ç–µ—Å—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏
  garbagePhp_chunkSize?: number;  // –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è garbage.php
  mpot?: boolean;           // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫
  overheadCompensationFactor?: number; // –§–∞–∫—Ç–æ—Ä –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
  useMebibits?: boolean;    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Mebibits –≤–º–µ—Å—Ç–æ Megabits
  accuracy?: number;        // –¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è (0-8), –≤—ã—à–µ = —Ç–æ—á–Ω–µ–µ, –Ω–æ –¥–æ–ª—å—à–µ
  download_bias?: number;   // –ü–æ–ø—Ä–∞–≤–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (0.8-1.5)
  upload_bias?: number;     // –ü–æ–ø—Ä–∞–≤–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ (0.8-1.5)
  ping_bias?: number;       // –ü–æ–ø—Ä–∞–≤–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–∏–Ω–≥–∞ (0.8-1.5)
}

export class SimpleSpeedTest {
  private state: TestState = TestState.WAITING;
  private settings: SpeedTestSettings;
  private defaultSettings: SpeedTestSettings = {
    test_order: "P_D_U",
    time_dl_max: 10,
    time_ul_max: 10, // –£–º–µ–Ω—å—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–≥—Ä—É–∑–∫–∏ —Å 300 –¥–æ 10 —Å–µ–∫—É–Ω–¥
    time_auto: true,
    count_ping: 20, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø–∏–Ω–≥–∞ –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    xhr_dlMultistream: 6, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 3 –¥–æ 6 –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    xhr_ulMultistream: 6, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 3 –¥–æ 6 –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    xhr_ignoreErrors: 1,
    xhr_dlUseBlob: false,
    xhr_ul_blob_megabytes: 20,
    garbagePhp_chunkSize: 100,
    mpot: false,
    overheadCompensationFactor: 1.06,
    useMebibits: false,
    url_dl: "",
    url_ul: "",
    url_ping: "",
    url_getIp: "",
    accuracy: 3, // –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    download_bias: 1.0, // –ù–µ—Ç —Å–º–µ—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    upload_bias: 1.0, // –ù–µ—Ç —Å–º–µ—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ping_bias: 1.0 // –ù–µ—Ç —Å–º–µ—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  };
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
  private results = {
    ping: 0,
    jitter: 0,
    download: 0,
    upload: 0,
    ip: "",
    testTime: new Date()
  };
  
  // –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–∞
  private progress = {
    pingProgress: 0,
    dlProgress: 0,
    ulProgress: 0
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–≥—Ä—É–∑–∫–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  private uploadCount = 0;
  private maxUploadRequests = 20; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 15 –¥–æ 20 –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  public onupdate: ((data: SpeedTestProgress) => void) | null = null;
  public onend: ((aborted: boolean) => void) | null = null;
  
  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  private worker = navigator.hardwareConcurrency || 4;
  private dlStatus = "";
  private ulStatus = "";
  private pingStatus = "";
  private jitterStatus = "";
  private dlProgress = 0;
  private ulProgress = 0;
  private pingProgress = 0;
  
  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  private xhrRequest: XMLHttpRequest[] = [];
  private interval: NodeJS.Timeout | null = null;
  private downloadTestTimer: NodeJS.Timeout | null = null;
  private uploadTestTimer: NodeJS.Timeout | null = null;
  private pendingRequests = 0;
  private startTime = 0;
  private prevTime = 0;
  private prevLoaded = 0;
  private totalBytes = 0;
  private pingRuns = 0;
  private prevPingProgress = 0;
  private isRunning = false;
  private pingValues: number[] = [];
  private jitterValues: number[] = [];
  
  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  private lastDlSpeed = 0;
  private lastDlSpeedChangeTime = 0;
  private lastUlSpeed = 0;
  private lastUlSpeedChangeTime = 0;
  private stableSpeedThreshold = 0.05; // –£–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ä–æ–≥ —Å 10% –¥–æ 5% –¥–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
  private minStableTime = 2; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  private completedTests: { [key: string]: boolean } = {
    P: false, // –ü–∏–Ω–≥
    D: false, // –ó–∞–≥—Ä—É–∑–∫–∞
    U: false  // –í—ã–≥—Ä—É–∑–∫–∞
  };
  
  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
   */
  constructor(settings: Partial<SpeedTestSettings>) {
    this.settings = { ...this.defaultSettings, ...settings };
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!this.settings.url_dl || !this.settings.url_ul || !this.settings.url_ping) {
      throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å url_dl, url_ul –∏ url_ping –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏
    if (this.settings.accuracy !== undefined) {
      const accuracy = Math.min(8, Math.max(1, this.settings.accuracy));
      this.settings.count_ping = 5 + accuracy * 5; // –æ—Ç 10 –¥–æ 45 –ø–∏–Ω–≥–æ–≤
      this.settings.xhr_dlMultistream = 3 + accuracy; // –æ—Ç 4 –¥–æ 11 –ø–æ—Ç–æ–∫–æ–≤
      this.settings.xhr_ulMultistream = 3 + accuracy; // –æ—Ç 4 –¥–æ 11 –ø–æ—Ç–æ–∫–æ–≤
      this.maxUploadRequests = 10 + accuracy * 2; // –æ—Ç 12 –¥–æ 26 –∑–∞–ø—Ä–æ—Å–æ–≤
      this.stableSpeedThreshold = 0.1 - (accuracy * 0.01); // –æ—Ç 0.09 –¥–æ 0.02
    }
  }
  
  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–µ—Å—Ç–∞
   */
  public setParameter(name: keyof SpeedTestSettings, value: any): void {
    if (this.state !== TestState.WAITING) {
      throw new Error("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞");
    }
    (this.settings as any)[name] = value;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
   */
  public getState(): TestState {
    return this.state;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
   */
  public getResults(): any {
    return this.results;
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
   */
  public start(): void {
    if (this.state !== TestState.WAITING) {
      throw new Error("–¢–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω");
    }
    
    // –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π
    this.isRunning = true;
    this.dlStatus = "";
    this.ulStatus = "";
    this.pingStatus = "";
    this.jitterStatus = "";
    this.dlProgress = 0;
    this.ulProgress = 0;
    this.pingProgress = 0;
    this.pingValues = [];
    this.jitterValues = [];
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    this.completedTests = {
      P: false,
      D: false,
      U: false
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    const testOrder = this.settings.test_order || "P_D_U";
    
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ SimpleSpeedTest, –ø–æ—Ä—è–¥–æ–∫ —Ç–µ—Å—Ç–æ–≤: ${testOrder}`);
    
    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
    if (testOrder.indexOf("P") !== -1) {
      this.startPingTest();
    } else if (testOrder.indexOf("D") !== -1) {
      this.startDownloadTest();
    } else if (testOrder.indexOf("U") !== -1) {
      this.startUploadTest();
    } else {
      this.endTest(false);
    }
  }
  
  /**
   * –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç
   */
  public abort(): void {
    if (this.state === TestState.WAITING || this.state === TestState.FINISHED || this.state === TestState.ABORTED) {
      return;
    }
    
    console.log("‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
    this.abortRequests();
    this.clearAllTimers();
    this.state = TestState.ABORTED;
    this.isRunning = false;
    
    if (this.onend) this.onend(true);
  }
  
  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç
   */
  private endTest(aborted: boolean): void {
    if (this.state === TestState.FINISHED || this.state === TestState.ABORTED) return;
    
    console.log("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
    console.log(`üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: 
      - –ü–∏–Ω–≥: ${this.results.ping.toFixed(2)} –º—Å
      - –î–∂–∏—Ç—Ç–µ—Ä: ${this.results.jitter.toFixed(2)} –º—Å
      - –ó–∞–≥—Ä—É–∑–∫–∞: ${this.results.download.toFixed(2)} –ú–±–∏—Ç/—Å
      - –í—ã–≥—Ä—É–∑–∫–∞: ${this.results.upload.toFixed(2)} –ú–±–∏—Ç/—Å`);
    
    this.abortRequests();
    this.clearAllTimers();
    this.state = aborted ? TestState.ABORTED : TestState.FINISHED;
    this.isRunning = false;
    
    this.results.testTime = new Date();
    
    if (this.onend) this.onend(aborted);
  }
  
  /**
   * –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
   */
  private abortRequests(): void {
    this.xhrRequest.forEach(xhr => {
      if (xhr) {
        try {
          xhr.onprogress = null;
          xhr.onload = null;
          xhr.onerror = null;
          xhr.abort();
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        }
      }
    });
    this.xhrRequest = [];
    this.pendingRequests = 0;
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç—É
   */
  private sendUpdate(): void {
    if (!this.onupdate) return;
    
    this.onupdate({
      pingStatus: this.pingStatus,
      jitterStatus: this.jitterStatus,
      dlStatus: this.dlStatus,
      ulStatus: this.ulStatus,
      pingProgress: this.pingProgress,
      dlProgress: this.dlProgress,
      ulProgress: this.ulProgress,
      testState: this.state
    });
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø–∏–Ω–≥–∞
   */
  private startPingTest(): void {
    this.state = TestState.PING;
    this.pingRuns = 0;
    this.pingProgress = 0;
    
    console.log("üèì –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–∏–Ω–≥–∞");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    this.interval = setInterval(() => {
      this.sendUpdate();
    }, 200);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–∏–Ω–≥–∞
    this.doPing();
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –ø–∏–Ω–≥–∞
   */
  private doPing(): void {
    if (!this.isRunning) return;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤
    this.pingRuns++;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
    this.prevTime = Date.now();
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    const xhr = new XMLHttpRequest();
    this.xhrRequest.push(xhr);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const pingUrl = `${this.settings.url_ping}${this.settings.url_ping.indexOf("?") === -1 ? "?" : "&"}_=${Date.now()}`;
    
    xhr.open("GET", pingUrl, true);
    xhr.responseType = "text";
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    xhr.onload = () => {
      if (!this.isRunning) return;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∏–Ω–≥
      const pingTime = Date.now() - this.prevTime;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ –¥–∂–∏—Ç—Ç–µ—Ä–∞
      this.pingValues.push(pingTime);
      
      // –†–∞—Å—á–µ—Ç –¥–∂–∏—Ç—Ç–µ—Ä–∞ (—Ä–∞–∑–±—Ä–æ—Å–∞ –ø–∏–Ω–≥–∞)
      if (this.pingValues.length > 1) {
        this.jitterValues.push(Math.abs(this.pingValues[this.pingValues.length - 1] - this.pingValues[this.pingValues.length - 2]));
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ 75% –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
      const sortedPings = [...this.pingValues].sort((a, b) => a - b);
      const bestPings = sortedPings.slice(0, Math.ceil(sortedPings.length * 0.75));
      
      // –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –ø–∏–Ω–≥–æ–≤
      const avgPing = bestPings.length > 0 
        ? bestPings.reduce((a, b) => a + b, 0) / bestPings.length 
        : this.pingValues[0];
      
      // –î–∂–∏—Ç—Ç–µ—Ä - —Å—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
      let jitterSum = 0;
      if (this.jitterValues.length > 0) {
        jitterSum = this.jitterValues.reduce((a, b) => a + b, 0);
      }
      const jitterAvg = this.jitterValues.length > 0 ? jitterSum / this.jitterValues.length : 0;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ø—Ä–∞–≤–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫ –ø–∏–Ω–≥—É –∏ –¥–∂–∏—Ç—Ç–µ—Ä—É
      const adjustedPing = avgPing * (this.settings.ping_bias || 1.0);
      const adjustedJitter = jitterAvg * (this.settings.ping_bias || 1.0);
      
      this.pingStatus = adjustedPing.toFixed(2);
      this.jitterStatus = adjustedJitter.toFixed(2);
      this.results.ping = adjustedPing;
      this.results.jitter = adjustedJitter;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      this.pingProgress = this.pingRuns / this.settings.count_ping!;
      
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ç–µ—Å—Ç –ø–∏–Ω–≥–∞
      if (this.pingRuns >= this.settings.count_ping!) {
        this.pingProgress = 1;
        
        console.log(`üèì –¢–µ—Å—Ç –ø–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: ${this.pingStatus}ms, –¥–∂–∏—Ç—Ç–µ—Ä: ${this.jitterStatus}ms`);
        
        // –û—Ç–º–µ—á–∞–µ–º —Ç–µ—Å—Ç –ø–∏–Ω–≥–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
        this.completedTests.P = true;
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É
        this.goToNextTest("P");
        return;
      }
      
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç —Å –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      setTimeout(() => this.doPing(), 200); // –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å 500 –¥–æ 200 –º—Å –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏
    xhr.onerror = () => {
      if (!this.isRunning) return;
      
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –ø–∏–Ω–≥–∞");
      
      // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
      xhr.abort();
      this.xhrRequest = this.xhrRequest.filter(x => x !== xhr);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
      if (this.settings.xhr_ignoreErrors) {
        setTimeout(() => this.doPing(), 100);
      } else {
        this.endTest(true);
      }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–∏–Ω–≥–∞
    xhr.timeout = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    xhr.ontimeout = () => {
      console.warn("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–∏–Ω–≥–∞");
      xhr.abort();
      this.xhrRequest = this.xhrRequest.filter(x => x !== xhr);
      
      // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
      if (this.settings.xhr_ignoreErrors) {
        setTimeout(() => this.doPing(), 100);
      }
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    xhr.send();
  }
  
  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private goToNextTest(currentTest: string): void {
    const testOrder = this.settings.test_order || "P_D_U";
    console.log(`üîÑ –í—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ ${currentTest}. –ü–æ—Ä—è–¥–æ–∫: ${testOrder}, –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: P=${this.completedTests.P}, D=${this.completedTests.D}, U=${this.completedTests.U}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    if (
      (testOrder.includes("P") && !this.completedTests.P) ||
      (testOrder.includes("D") && !this.completedTests.D) ||
      (testOrder.includes("U") && !this.completedTests.U)
    ) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
      if (testOrder.includes("D") && !this.completedTests.D) {
        console.log("üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ (D) –∫–∞–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏");
        this.startDownloadTest();
      } else if (testOrder.includes("U") && !this.completedTests.U) {
        console.log("üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏ (U) –∫–∞–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏");
        this.startUploadTest();
      } else if (testOrder.includes("P") && !this.completedTests.P) {
        console.log("üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–∏–Ω–≥–∞ (P) –∫–∞–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏");
        this.startPingTest();
      }
    } else {
      // –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º
      console.log("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã");
      this.endTest(false);
    }
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  private startDownloadTest(): void {
    // –ï—Å–ª–∏ —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É
    if (this.completedTests.D) {
      console.log("‚ö†Ô∏è –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
      this.goToNextTest("D");
      return;
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –≤—ã–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.uploadTestTimer) {
      clearTimeout(this.uploadTestTimer);
      this.uploadTestTimer = null;
    }
    
    this.state = TestState.DOWNLOAD;
    this.dlProgress = 0;
    this.dlStatus = "0.00";
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    this.lastDlSpeed = 0;
    this.lastDlSpeedChangeTime = 0;
    
    console.log("‚¨áÔ∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    console.log(`üîç URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${this.settings.url_dl}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (!this.interval) {
      this.interval = setInterval(() => {
        this.sendUpdate();
      }, 200);
    }
    
    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
    this.totalBytes = 0;
    this.startTime = Date.now();
    this.prevLoaded = 0;
    this.prevTime = Date.now();
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.doPreconnect(this.settings.url_dl);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
    this.pendingRequests = 0;
    for (let i = 0; i < this.settings.xhr_dlMultistream!; i++) {
      this.pendingRequests++;
      this.doDownloadRequest();
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    this.downloadTestTimer = setTimeout(() => {
      this.completeDownloadTest();
    }, this.settings.time_dl_max! * 1000);
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   */
  private doPreconnect(url: string): void {
    const link = document.createElement('link');
    link.rel = 'preconnect';
    link.href = url;
    document.head.appendChild(link);
    
    setTimeout(() => {
      document.head.removeChild(link);
    }, 5000);
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  private doDownloadRequest(): void {
    if (!this.isRunning) return;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    const xhr = new XMLHttpRequest();
    this.xhrRequest.push(xhr);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Blob –µ—Å–ª–∏ —ç—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    xhr.responseType = this.settings.xhr_dlUseBlob ? "blob" : "arraybuffer";
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const chunkSize = this.settings.garbagePhp_chunkSize;
    let dlURL = this.settings.url_dl;
    
    // –ï—Å–ª–∏ URL —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ &, –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ ?
    if (dlURL.indexOf("?") === -1) {
      dlURL += "?";
    } else {
      dlURL += "&";
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    dlURL += "ckSize=" + chunkSize;
    dlURL += "&_=" + Date.now();
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    try {
      xhr.open("GET", dlURL, true);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
      xhr.setRequestHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
      xhr.setRequestHeader('Pragma', 'no-cache');
      xhr.setRequestHeader('Expires', '0');
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      xhr.onprogress = (event) => {
        if (!this.isRunning) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const loaded = event.loaded;
        const now = Date.now();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—á–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        if (loaded > this.prevLoaded) {
          this.totalBytes += loaded - this.prevLoaded;
        }
        
        this.prevLoaded = loaded;
        this.prevTime = now;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
        const timeElapsed = (now - this.startTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        if (timeElapsed > 0) {
          // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –º–µ–≥–∞–±–∏—Ç–∞—Ö –≤ —Å–µ–∫—É–Ω–¥—É
          const speed = (this.totalBytes * 8) / (1024 * 1024 * timeElapsed);
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ø—Ä–∞–≤–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
          const adjustedSpeed = speed * (this.settings.download_bias || 1.0);
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
          this.dlStatus = adjustedSpeed.toFixed(2);
          this.results.download = adjustedSpeed;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é —Å–∫–æ—Ä–æ—Å—Ç–∏
          const speedChange = Math.abs(adjustedSpeed - this.lastDlSpeed) / this.lastDlSpeed;
          
          if (this.lastDlSpeed > 0 && speedChange < this.stableSpeedThreshold) {
            // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å
            if (this.lastDlSpeedChangeTime === 0) {
              this.lastDlSpeedChangeTime = now;
            } else if ((now - this.lastDlSpeedChangeTime) / 1000 > this.minStableTime) {
              // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
              clearTimeout(this.downloadTestTimer!);
              this.downloadTestTimer = null;
              this.completeDownloadTest();
              return;
            }
          } else {
            // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            this.lastDlSpeed = adjustedSpeed;
            this.lastDlSpeedChangeTime = 0;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          const timeFraction = Math.min(1, timeElapsed / this.settings.time_dl_max!);
          this.dlProgress = timeFraction;
        }
      };
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      xhr.onload = () => {
        if (!this.isRunning) return;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        this.pendingRequests--;
        this.doDownloadRequest();
      };
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏
      xhr.onerror = () => {
        if (!this.isRunning) return;
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        xhr.abort();
        this.xhrRequest = this.xhrRequest.filter(x => x !== xhr);
        
        this.pendingRequests--;
        
        // –ï—Å–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        if (this.settings.xhr_ignoreErrors) {
          setTimeout(() => this.doDownloadRequest(), 100);
        } else if (this.pendingRequests === 0) {
          // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
          this.completeDownloadTest();
        }
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      xhr.timeout = 10000; // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
      xhr.ontimeout = () => {
        console.warn("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
        xhr.abort();
        this.xhrRequest = this.xhrRequest.filter(x => x !== xhr);
        
        this.pendingRequests--;
        
        // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        if (this.settings.xhr_ignoreErrors) {
          setTimeout(() => this.doDownloadRequest(), 100);
        } else if (this.pendingRequests === 0) {
          this.completeDownloadTest();
        }
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      xhr.send();
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", e);
      this.pendingRequests--;
      
      if (this.pendingRequests === 0) {
        this.completeDownloadTest();
      }
    }
  }
  
  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
   */
  private completeDownloadTest(): void {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if (this.downloadTestTimer) {
      clearTimeout(this.downloadTestTimer);
      this.downloadTestTimer = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
    this.abortRequests();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ 100%
    this.dlProgress = 1;
    
    console.log(`‚¨áÔ∏è –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: ${this.dlStatus} –ú–±–∏—Ç/—Å`);
    
    // –û—Ç–º–µ—á–∞–µ–º —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
    this.completedTests.D = true;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É
    this.goToNextTest("D");
  }
  
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏
   */
  private startUploadTest(): void {
    // –ï—Å–ª–∏ —Ç–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É
    if (this.completedTests.U) {
      console.log("‚ö†Ô∏è –¢–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
      this.goToNextTest("U");
      return;
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    if (this.downloadTestTimer) {
      clearTimeout(this.downloadTestTimer);
      this.downloadTestTimer = null;
    }
    
    this.state = TestState.UPLOAD;
    this.ulProgress = 0;
    this.ulStatus = "0.00";
    this.uploadCount =  0;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    this.lastUlSpeed = 0;
    this.lastUlSpeedChangeTime = 0;
    
    console.log("‚¨ÜÔ∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏");
    console.log(`üîç URL –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏: ${this.settings.url_ul}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (!this.interval) {
      this.interval = setInterval(() => {
        this.sendUpdate();
      }, 200);
    }
    
    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
    this.totalBytes = 0;
    this.startTime = Date.now();
    this.prevLoaded = 0;
    this.prevTime = Date.now();
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.doPreconnect(this.settings.url_ul);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –≤—ã–≥—Ä—É–∑–∫–∏
    this.pendingRequests = 0;
    for (let i = 0; i < this.settings.xhr_ulMultistream!; i++) {
      this.pendingRequests++;
      this.doUploadRequest();
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    this.uploadTestTimer = setTimeout(() => {
      this.completeUploadTest();
    }, this.settings.time_ul_max! * 1000);
  }
  
  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏
   */
  private completeUploadTest(): void {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –≤—ã–≥—Ä—É–∑–∫–∏
    if (this.uploadTestTimer) {
      clearTimeout(this.uploadTestTimer);
      this.uploadTestTimer = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
    this.abortRequests();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–≥—Ä—É–∑–∫–∏ –≤ 100%
    this.ulProgress = 1;
    
    console.log(`‚¨ÜÔ∏è –¢–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: ${this.ulStatus} –ú–±–∏—Ç/—Å`);
    
    // –û—Ç–º–µ—á–∞–µ–º —Ç–µ—Å—Ç –≤—ã–≥—Ä—É–∑–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
    this.completedTests.U = true;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ—Å—Ç—É
    this.goToNextTest("U");
  }
  
  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  private doUploadRequest(): void {
    if (!this.isRunning) return;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.uploadCount++;
    if (this.uploadCount >= this.maxUploadRequests) {
      console.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–≥—Ä—É–∑–∫–∏: ${this.maxUploadRequests}`);
      this.pendingRequests--;
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    const xhr = new XMLHttpRequest();
    this.xhrRequest.push(xhr);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    // –†–∞–∑–º–µ—Ä –±–ª–æ–±–∞ –≤ –±–∞–π—Ç–∞—Ö (—É–∫–∞–∑–∞–Ω–æ –≤ –ú–ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
    const size = this.settings.xhr_ul_blob_megabytes! * 1024 * 1024;
    
    let blobData;
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Uint8Array –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
      const data = new Uint8Array(size);
      
      // –≠—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä—É –±—ã—Å—Ç—Ä–µ–µ —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–±
      // –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω
      const pattern = new Uint8Array(1024);
      for (let i = 0; i < 1024; i++) {
        pattern[i] = Math.random() * 256;
      }
      
      // –ö–æ–ø–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω, –∑–∞–ø–æ–ª–Ω—è—è –≤–µ—Å—å –º–∞—Å—Å–∏–≤
      for (let i = 0; i < size; i += 1024) {
        const chunkSize = Math.min(1024, size - i);
        data.set(pattern.subarray(0, chunkSize), i);
      }
      
      // –°–æ–∑–¥–∞–µ–º blob –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      blobData = new Blob([data], { type: 'application/octet-stream' });
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏:", e);
      
      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ blob –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
      let str = "";
      const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      
      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const adjSize = Math.min(size, 1024 * 1024); // –ú–∞–∫—Å–∏–º—É–º 1MB —Å—Ç—Ä–æ–∫–∏
      
      for (let i = 0; i < adjSize; i++) {
        str += characters.charAt(Math.floor(Math.random() * characters.length));
      }
      
      blobData = new Blob([str], { type: 'application/octet-stream' });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    let ulURL = this.settings.url_ul;
    if (ulURL.indexOf("?") === -1) {
      ulURL += "?";
    } else {
      ulURL += "&";
    }
    ulURL += "_=" + Date.now();
    
    // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É
    try {
      xhr.open("POST", ulURL, true);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
      xhr.setRequestHeader('Content-Type', 'application/octet-stream');
      xhr.setRequestHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
      xhr.setRequestHeader('Pragma', 'no-cache');
      xhr.setRequestHeader('Expires', '0');
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      xhr.upload.onprogress = (event) => {
        if (!this.isRunning) return;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const loaded = event.loaded;
        const now = Date.now();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–º—É —Å—á–µ—Ç—á–∏–∫—É –≤—ã–≥—Ä—É–∑–∫–∏
        if (loaded > this.prevLoaded) {
          this.totalBytes += loaded - this.prevLoaded;
        }
        
        this.prevLoaded = loaded;
        this.prevTime = now;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏
        const timeElapsed = (now - this.startTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        if (timeElapsed > 0) {
          // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –º–µ–≥–∞–±–∏—Ç–∞—Ö –≤ —Å–µ–∫—É–Ω–¥—É
          const speed = (this.totalBytes * 8) / (1024 * 1024 * timeElapsed);
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ø—Ä–∞–≤–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
          const adjustedSpeed = speed * (this.settings.upload_bias || 1.0);
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
          this.ulStatus = adjustedSpeed.toFixed(2);
          this.results.upload = adjustedSpeed;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é —Å–∫–æ—Ä–æ—Å—Ç–∏
          const speedChange = Math.abs(adjustedSpeed - this.lastUlSpeed) / this.lastUlSpeed;
          
          if (this.lastUlSpeed > 0 && speedChange < this.stableSpeedThreshold) {
            // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å
            if (this.lastUlSpeedChangeTime === 0) {
              this.lastUlSpeedChangeTime = now;
            } else if ((now - this.lastUlSpeedChangeTime) / 1000 > this.minStableTime) {
              // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
              clearTimeout(this.uploadTestTimer!);
              this.uploadTestTimer = null;
              this.completeUploadTest();
              return;
            }
          } else {
            // –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            this.lastUlSpeed = adjustedSpeed;
            this.lastUlSpeedChangeTime = 0;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          const timeFraction = Math.min(1, timeElapsed / this.settings.time_ul_max!);
          this.ulProgress = timeFraction;
        }
      };
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      xhr.onload = () => {
        if (!this.isRunning) return;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        this.prevLoaded = 0;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        this.pendingRequests--;
        this.doUploadRequest();
      };
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏
      xhr.onerror = () => {
        if (!this.isRunning) return;
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        xhr.abort();
        this.xhrRequest = this.xhrRequest.filter(x => x !== xhr);
        
        this.pendingRequests--;
        
        // –ï—Å–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        if (this.settings.xhr_ignoreErrors) {
          setTimeout(() => this.doUploadRequest(), 100);
        } else if (this.pendingRequests === 0) {
          // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
          this.completeUploadTest();
        }
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      xhr.timeout = 12000; // 12 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º - upload –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
      xhr.ontimeout = () => {
        console.warn("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–≥—Ä—É–∑–∫–∏");
        xhr.abort();
        this.xhrRequest = this.xhrRequest.filter(x => x !== xhr);
        
        this.pendingRequests--;
        
        // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
        if (this.settings.xhr_ignoreErrors) {
          setTimeout(() => this.doUploadRequest(), 100);
        } else if (this.pendingRequests === 0) {
          this.completeUploadTest();
        }
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      xhr.send(blobData);
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–≥—Ä—É–∑–∫–∏:", e);
      this.pendingRequests--;
      
      if (this.pendingRequests === 0) {
        this.completeUploadTest();
      }
    }
  }
  
  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
   */
  private clearAllTimers(): void {
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
    
    if (this.downloadTestTimer) {
      clearTimeout(this.downloadTestTimer);
      this.downloadTestTimer = null;
    }
    
    if (this.uploadTestTimer) {
      clearTimeout(this.uploadTestTimer);
      this.uploadTestTimer = null;
    }
  }
} 