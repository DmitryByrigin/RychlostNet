import { useState, useCallback } from 'react';
import { PingStats } from './utils/types';

export interface EnhancedPingResult extends PingStats {
  pingDetails: number[];
  timestamp: string;
}

export const useEnhancedPing = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [pingResult, setPingResult] = useState<EnhancedPingResult | null>(null);
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∏–Ω–≥-—Ç–µ—Å—Ç–∞
  const handlePingResult = useCallback((result: PingStats & { pingDetails: number[] }) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    const enhancedResult: EnhancedPingResult = {
      ...result,
      timestamp: new Date().toISOString()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    setPingResult(enhancedResult);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∏–Ω–≥-—Ç–µ—Å—Ç–∞:", enhancedResult);
    // console.log("üìä –í—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:", enhancedResult.pingDetails.map(p => p + " –º—Å").join(", "));
    
    return enhancedResult;
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –ø–∏–Ω–≥–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ö—É–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  const runPingTest = useCallback(async (): Promise<EnhancedPingResult | null> => {
    if (isRunning) return null;
    
    setIsRunning(true);
    
    try {
      // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∏–Ω–≥–∞
      const pings: number[] = [];
      
      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ "—Ä–∞–∑–æ–≥—Ä–µ–≤–∞–µ–º" —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      await fetch("https://www.cloudflare.com/cdn-cgi/trace", {
        cache: 'no-store'
      });
      
      // –°–ø–∏—Å–æ–∫ –ª–µ–≥–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞
      const pingUrls = [
        "https://www.cloudflare.com/cdn-cgi/trace",  // Cloudflare —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
        "https://cloudflare.com/cdn-cgi/trace",      // Cloudflare –≤–∞—Ä–∏–∞–Ω—Ç 2
        "https://1.1.1.1/cdn-cgi/trace",             // DNS Cloudflare
        "https://www.google.com/generate_204",       // Google 204 –æ—Ç–≤–µ—Ç (–ø—É—Å—Ç–æ–π)
        "https://www.apple.com/library/test/success.html" // Apple —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      ];
      
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ —Ä–∞–∑–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
      for (let i = 0; i < pingUrls.length; i++) {
        const url = pingUrls[i];
        const startTime = performance.now(); // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
        
        await fetch(url, {
          cache: 'no-store', // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
          mode: 'no-cors',   // –†–µ–∂–∏–º no-cors –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
          headers: {
            'Accept': '*/*',
            'Cache-Control': 'no-cache'
          }
        });
        
        const endTime = performance.now();
        const pingTime = endTime - startTime;
        pings.push(pingTime);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –∏ –Ω–∏–∑–∫–∏–π –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
      pings.sort((a, b) => a - b);
      
      // –ë–µ—Ä–µ–º 3 —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å 5) –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
      const filteredPings = pings.length >= 5 
        ? pings.slice(1, pings.length - 1) 
        : pings;
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø–∏–Ω–≥
      const avgPing = filteredPings.reduce((sum, time) => sum + time, 0) / filteredPings.length;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –¥–∂–∏—Ç—Ç–µ—Ä (–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
      let jitter = 0;
      for (let i = 1; i < filteredPings.length; i++) {
        jitter += Math.abs(filteredPings[i] - filteredPings[i-1]);
      }
      const avgJitter = filteredPings.length > 1 ? jitter / (filteredPings.length - 1) : 0;
      
      const result: EnhancedPingResult = {
        min: Math.round(pings[0]),
        max: Math.round(pings[pings.length-1]),
        avg: Math.round(avgPing),
        jitter: Math.round(avgJitter),
        pingDetails: pings.map(p => Math.round(p)),
        timestamp: new Date().toISOString()
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setPingResult(result);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return result;
      
    } catch (error) {
      // console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –ø–∏–Ω–≥–∞:", error);
      return null;
    } finally {
      setIsRunning(false);
    }
  }, [isRunning]);
  
  return {
    pingResult,
    isRunning,
    handlePingResult,
    runPingTest
  };
}; 