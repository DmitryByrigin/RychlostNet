import { useState, useRef, useEffect, useCallback } from 'react';
import { LibreSpeedServer, SpeedTestResult } from '../types/librespeed';
import { PingStats, SpeedTestResultExtended } from './utils/types';
import { useServer } from '../contexts/ServerContext';

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ 
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ API-–∑–∞–ø—Ä–æ—Å—ã –∫ –±—ç–∫–µ–Ω–¥—É
 */
export const useSpeedTest = () => {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const [uploadSpeed, setUploadSpeed] = useState('');
    const [downloadSpeed, setDownloadSpeed] = useState('');
    const [pingStats, setPingStats] = useState<PingStats>({ min: 0, max: 0, avg: 0, jitter: 0 });
    const [isTesting, setIsTesting] = useState(false);
    const [progress, setProgress] = useState(0);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const [servers, setServers] = useState<LibreSpeedServer[]>([]);
    const [selectedServer, setSelectedServer] = useState<LibreSpeedServer | null>(null);
    const [libreSpeedResult, setLibreSpeedResult] = useState<SpeedTestResultExtended | null>(null);
    
    // –†–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    const testInProgressRef = useRef(false);
    const { geolocationData } = useServer();
    
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
    const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    useEffect(() => {
        const loadServers = async () => {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                const cacheKey = 'server_info_cache';
                const cacheStr = localStorage.getItem(cacheKey);
                
                if (cacheStr) {
                    try {
                        const cache = JSON.parse(cacheStr);
                        if (Date.now() - cache.timestamp < CACHE_DURATION) {
                            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞
                            if (!selectedServer && cache.data.length > 0) {
                                setSelectedServer(cache.data[0]);
                            }
                            return;
                        }
                    } catch (e) {
                        console.warn('Failed to parse server cache:', e);
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞ –∏–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
                console.log('Fetching fresh server info in useSpeedTest...');
                const response = await fetch(`${process.env.NEXT_PUBLIC_API_SERVERS}/speedtest/server-info`);
                
                if (response.ok) {
                    const data = await response.json();
                    if (data && data.servers && data.servers.length > 0) {
                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç LibreSpeedServer
                        const formattedServers: LibreSpeedServer[] = data.servers.map((s: any) => ({
                            name: s.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä',
                            server: s.url || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º url –∫–∞–∫ server
                            dlURL: 'garbage.php',
                            ulURL: 'empty.php',
                            pingURL: 'empty.php',
                            getIpURL: 'getIP.php',
                            location: s.location || {
                                city: s.city || '',
                                region: s.region || '',
                                country: s.country || '',
                                org: s.sponsor || ''
                            }
                        }));
                        
                        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        localStorage.setItem(cacheKey, JSON.stringify({
                            data: formattedServers,
                            timestamp: Date.now()
                        }));
                        
                        setServers(formattedServers);
                        
                        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞
                        if (!selectedServer && formattedServers.length > 0) {
                            setSelectedServer(formattedServers[0]);
                        }
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
            }
        };
        
        loadServers();
    }, [selectedServer]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏–Ω–≥–∞
    const testPing = async (): Promise<{min: number, max: number, avg: number, jitter: number}> => {
        try {
            if (!selectedServer) {
                throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω');
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏–Ω–≥–∞
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —ç–Ω–¥–ø–æ–∏–Ω—Ç –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            const pingEndpoint = `${process.env.NEXT_PUBLIC_API_SERVERS}/speedtest/ping`;
            console.log('üîÑ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É:', pingEndpoint);
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ä–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const pingResults: number[] = [];
            const pingCount = 20; // –±–æ–ª—å—à–µ –∑–∞–º–µ—Ä–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            
            // –î–µ–ª–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π "—Ä–∞–∑–æ–≥—Ä–µ–≤–∞—é—â–∏–π" –∑–∞–ø—Ä–æ—Å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π GET –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–æ–≥—Ä–µ–≤–∞
            try {
                await fetch(`${pingEndpoint}?_=${Date.now()}`);
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–∞—Å—Ç–æ—è—â–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
                await new Promise(resolve => setTimeout(resolve, 50));
            } catch (error) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–æ–≥—Ä–µ–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä–∏—é HEAD-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∏–Ω–≥–∞
            for (let i = 0; i < pingCount; i++) {
                const startTime = performance.now(); // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                try {
                    // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º HEAD-–∑–∞–ø—Ä–æ—Å—ã, —Ç–∞–∫ –∫–∞–∫ –º—ã –æ–±–Ω–æ–≤–∏–ª–∏ –±—ç–∫–µ–Ω–¥
                    await fetch(`${pingEndpoint}?nocache=${Date.now()}`, {
                        method: 'HEAD',
                        cache: 'no-store',
                        headers: { 'Cache-Control': 'no-cache' }
                    });
                    const endTime = performance.now();
                    pingResults.push(endTime - startTime);
                } catch (error) {
                    console.warn(`–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${i} –ø—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –ø–∏–Ω–≥–∞:`, error);
                }
                
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 10));
            }
            
            if (pingResults.length === 0) {
                throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–∏–Ω–≥–µ');
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∫–∞–∫ –≤ Speedtest.net)
            const sortedResults = [...pingResults].sort((a, b) => a - b);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ 30% –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const bestCount = Math.max(3, Math.floor(sortedResults.length * 0.3));
            const bestResults = sortedResults.slice(0, bestCount);
            
            console.log('–ò–∑–º–µ—Ä–µ–Ω–∏—è –ø–∏–Ω–≥–∞:', {
                all: pingResults,
                best: bestResults
            });
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –∑–∞–º–µ—Ä–æ–≤
            const min = bestResults[0];
            const max = bestResults[bestResults.length - 1];
            const avg = bestResults.reduce((sum, time) => sum + time, 0) / bestResults.length;
            
            // –î–∂–∏—Ç—Ç–µ—Ä –≤—ã—á–∏—Å–ª—è–µ–º –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            const jitter = pingResults.reduce((sum, val) => sum + Math.abs(val - avg), 0) / pingResults.length;
            
            return {
                min,
                max,
                avg,
                jitter
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∏–Ω–≥–∞:', error);
            return { min: 0, max: 0, avg: 0, jitter: 0 };
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (download)
    const testDownload = async (): Promise<number> => {
        try {
            if (!selectedServer) {
                throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω');
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 2MB)
            const size = 1 * 1024 * 1024;
            const response = await fetch(`${process.env.NEXT_PUBLIC_API_SERVERS}/speedtest/download/${size}`);
            
            if (response.ok) {
                const startTime = Date.now();
                await response.arrayBuffer(); // –î–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                const endTime = Date.now();
                
                // –°—á–∏—Ç–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤ Mbps
                const duration = (endTime - startTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                const speedMbps = (size * 8) / 1000000 / duration; // –±–∏—Ç—ã –≤ –ú–±–∏—Ç—ã/—Å
                
                return speedMbps;
            }
            
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            return 0;
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ (upload)
    const testUpload = async (): Promise<number> => {
        try {
            if (!selectedServer) {
                throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω');
            }
            
            // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
            const dataSize = 1024 * 1024 * 1; // 1 MB
            const randomData = new ArrayBuffer(dataSize);
            const blob = new Blob([randomData], { type: 'application/octet-stream' });
            
            // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è multipart/form-data
            const formData = new FormData();
            formData.append('file', new File([blob], 'speedtest.bin', { type: 'application/octet-stream' }));
            
            const startTime = Date.now();
            const response = await fetch(`${process.env.NEXT_PUBLIC_API_SERVERS}/speedtest/upload`, {
                method: 'POST',
                body: formData
            });
            const endTime = Date.now();
            
            if (response.ok) {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤ Mbps
                const duration = (endTime - startTime) / 1000; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                const speedMbps = (dataSize * 8) / 1000000 / duration; // –∏–∑ –±–∏—Ç –≤ –ú–±–∏—Ç/—Å
                
                return speedMbps;
            }
            
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏:', error);
            return 0;
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
    const generateAndMeasureSpeed = async () => {
        // –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º—Å—è
        if (testInProgressRef.current) {
            return;
        }
        
        testInProgressRef.current = true;
        setIsTesting(true);
        setProgress(0);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        setDownloadSpeed('');
        setUploadSpeed('');
        setPingStats({ min: 0, max: 0, avg: 0, jitter: 0 });
        
        try {
            // –¢–µ—Å—Ç –ø–∏–Ω–≥–∞ (25% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
            setProgress(5);
            const pingResult = await testPing();
            setPingStats(pingResult);
            setProgress(25);
            
            // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (25% –¥–æ 65% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
            setProgress(30);
            const downloadResult = await testDownload();
            setDownloadSpeed(`${downloadResult.toFixed(2)} Mbps`);
            setProgress(65);
            
            // –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏ (65% –¥–æ 100% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
            setProgress(70);
            const uploadResult = await testUpload();
            setUploadSpeed(`${uploadResult.toFixed(2)} Mbps`);
            setProgress(100);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            const result: SpeedTestResultExtended = {
                download: downloadResult,
                upload: uploadResult,
                ping: {
                    min: pingResult.min,
                    max: pingResult.max,
                    avg: pingResult.avg,
                    jitter: 0
                },
                jitter: pingResult.jitter,
                ip: geolocationData?.ip || '',
                server: selectedServer || undefined,
                timestamp: new Date().toISOString()
            };
            
            setLibreSpeedResult(result);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            saveResults(result);
            
            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:', {
                download: `${result.download.toFixed(2)} Mbps`,
                upload: `${result.upload.toFixed(2)} Mbps`,
                ping: `${result.ping.avg.toFixed(2)} ms`,
                jitter: `${result.jitter.toFixed(2)} ms`
            });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏:', error);
        } finally {
            setIsTesting(false);
            testInProgressRef.current = false;
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const saveResults = async (result: SpeedTestResultExtended) => {
        try {
            // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å, —Ç–∞–∫ –∫–∞–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –Ω–µ—Ç
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', result);
            
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤ –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            // await fetch(`${process.env.NEXT_PUBLIC_API_SERVERS}/librespeed/results`, {
            //     method: 'POST',
            //     headers: {
            //         'Content-Type': 'application/json'
            //     },
            //     body: JSON.stringify(result)
            // });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        }
    };
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API —Ö—É–∫–∞
    return {
        uploadSpeed,
        downloadSpeed,
        pingStats,
        isTesting,
        progress,
        libreSpeedResult,
        generateAndMeasureSpeed,
        servers,
        selectedServer,
        setSelectedServer
    };
};

