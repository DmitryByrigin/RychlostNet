import { useState, useRef, useEffect, useCallback } from 'react';
import { useServer } from '../contexts/ServerContext';
import { LibreSpeedServer } from '../types/librespeed';
import { PingStats, SpeedTestResult } from './utils/types';

/**
 * –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ LibreSpeed API
 */
export const useLibreSpeedTest = () => {
    const [downloadSpeed, setDownloadSpeed] = useState<string>('');
    const [uploadSpeed, setUploadSpeed] = useState<string>('');
    const [pingStats, setPingStats] = useState<PingStats>({ min: 0, max: 0, avg: 0, jitter: 0 });
    const [isTesting, setIsTesting] = useState<boolean>(false);
    const [progress, setProgress] = useState<number>(0);
    const [libreSpeedResult, setLibreSpeedResult] = useState<SpeedTestResult | null>(null);
    const [servers, setServers] = useState<LibreSpeedServer[]>([]);
    const [selectedServer, setSelectedServer] = useState<LibreSpeedServer | null>(null);
    const [isRunning, setIsRunning] = useState(false);
    const [result, setResult] = useState<SpeedTestResult | null>(null);
    const [currentTest, setCurrentTest] = useState<string | null>(null);
    const [checkingServers, setCheckingServers] = useState<boolean>(true);
    
    const testInProgressRef = useRef<boolean>(false);
    const { geolocationData } = useServer();
    
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
    const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–æ–∫—Å–∏
    const API_BASE_URL = process.env.NEXT_PUBLIC_API_SERVERS || 'http://localhost:3001';
    const LIBRESPEED_ENDPOINT = `${API_BASE_URL}/api/speedtest/librespeed`;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è –°–ª–æ–≤–∞–∫–∏–∏
    const findBestServer = useCallback((servers: LibreSpeedServer[], userCountry?: string): LibreSpeedServer => {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –°–ª–æ–≤–∞–∫–∏–∏, –∏—â–µ–º —Å–ª–æ–≤–∞—Ü–∫–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –∏–ª–∏ –±–ª–∏–∂–∞–π—à–∏–µ –≤ —Ä–µ–≥–∏–æ–Ω–µ
        if (userCountry?.toLowerCase() === 'slovakia' || userCountry?.toLowerCase() === 'slovak republic') {
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –°–µ—Ä–≤–µ—Ä –≤ –°–ª–æ–≤–∞–∫–∏–∏
            const slovakServer = servers.find(s => 
                s.location?.country?.toLowerCase() === 'slovakia' || 
                s.location?.country?.toLowerCase() === 'slovak republic' ||
                s.location?.country?.toLowerCase() === 'slovensko');
                
            if (slovakServer) return slovakServer;
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –°–µ—Ä–≤–µ—Ä–∞ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö
            const nearbyCountries = ['czech republic', 'austria', 'hungary', 'poland'];
            const nearbyServer = servers.find(s => 
                s.location?.country && nearbyCountries.includes(s.location.country.toLowerCase()));
                
            if (nearbyServer) return nearbyServer;
        }
        
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –°–ª–æ–≤–∞–∫–∏–∏:
        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ
        if (userCountry) {
            const sameCountryServer = servers.find(s => 
                s.location?.country?.toLowerCase() === userCountry.toLowerCase());
                
            if (sameCountryServer) return sameCountryServer;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        return servers[0];
    }, []);

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏
    const checkServerAvailability = async (server: string): Promise<boolean> => {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä noCache –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            const testUrl = `${LIBRESPEED_ENDPOINT}/check?server=${encodeURIComponent(server)}&noCache=${Date.now()}`;
            const response = await fetch(testUrl, {
                method: 'GET',
                cache: 'no-cache',
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
                signal: AbortSignal.timeout(2000)
            });
            
            if (response.ok) {
                const data = await response.json();
                return data.available === true;
            }
            return false;
        } catch (err) {
            console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${server}`, err);
            return false;
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    useEffect(() => {
        const fetchServers = async () => {
            try {
                // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤
                setCheckingServers(true);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                const cacheKey = 'librespeed_servers_cache';
                const cacheStr = localStorage.getItem(cacheKey);
                
                if (cacheStr) {
                    try {
                        const cache = JSON.parse(cacheStr);
                        if (Date.now() - cache.timestamp < CACHE_DURATION) {
                            console.log('Using cached LibreSpeed server info');
                            setServers(cache.data);
                            
                            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                            if (!selectedServer && cache.data.length > 0) {
                                const bestServer = findBestServer(cache.data, geolocationData?.country);
                                setSelectedServer(bestServer);
                            }
                            
                            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –∫—ç—à–∞
                            setCheckingServers(false);
                            return;
                        }
                    } catch (e) {
                        console.warn('Failed to parse server cache:', e);
                    }
                }
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏
                console.log('–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
                
                try {
                    const response = await fetch(`${LIBRESPEED_ENDPOINT}/servers`);
                    if (response.ok) {
                        const data = await response.json();
                        
                        if (data && Array.isArray(data) && data.length > 0) {
                            console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${data.length} —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏`);
                            
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                            setServers(data);
                            
                            // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ –°–ª–æ–≤–∞–∫–∏–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                            const slovakServers = data.filter(server => 
                                server.location?.country?.includes('Slovakia') || 
                                server.name?.includes('Slovakia')
                            );
                            
                            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞—Ü–∫–∏–µ —Å–µ—Ä–≤–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                            if (slovakServers.length > 0) {
                                const bestServer = findBestServer(slovakServers, 'Slovakia');
                                setSelectedServer(bestServer);
                                console.log(`üåç –í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: ${bestServer.name}`);
                            } else {
                                // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–∏–∂–∞–π—à–∏–π –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä
                                const bestServer = findBestServer(data, geolocationData?.country);
                                setSelectedServer(bestServer);
                                console.log(`üåç –í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: ${bestServer.name}`);
                            }
                            
                            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            localStorage.setItem(cacheKey, JSON.stringify({
                                data: data,
                                timestamp: Date.now()
                            }));
                            
                            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤
                            setCheckingServers(false);
                            return;
                        }
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', error);
                }
                
                // –ï—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
                console.log('Using static list of verified LibreSpeed servers');
                
                // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏)
                const staticLibreSpeedServers: LibreSpeedServer[] = [
                    // –°–µ—Ä–≤–µ—Ä—ã –≤ –°–ª–æ–≤–∞–∫–∏–∏ –∏ —Ä—è–¥–æ–º
                    {
                        name: "Bratislava, Slovakia (Otelo)",
                        server: "http://bratislava.otelo.sk:8080/",
                        dlURL: "garbage.php",
                        ulURL: "empty.php",
                        pingURL: "empty.php",
                        getIpURL: "getIP.php",
                        location: {
                            city: "Bratislava",
                            region: "",
                            country: "Slovakia",
                            org: "Otelo"
                        }
                    },
                    {
                        name: "Bratislava, Slovakia (VNET)",
                        server: "http://speedtest.host.sk/",
                        dlURL: "garbage.php",
                        ulURL: "empty.php",
                        pingURL: "empty.php",
                        getIpURL: "getIP.php",
                        location: {
                            city: "Bratislava",
                            region: "",
                            country: "Slovakia",
                            org: "VNET"
                        }
                    },
                    {
                        name: "Nitra, Slovakia (Slovanet)",
                        server: "http://st.slovanet.sk/",
                        dlURL: "garbage.php",
                        ulURL: "empty.php",
                        pingURL: "empty.php",
                        getIpURL: "getIP.php",
                        location: {
                            city: "Nitra",
                            region: "",
                            country: "Slovakia",
                            org: "Slovanet"
                        }
                    },
                    {
                        name: "Budapest, Hungary (Tarr)",
                        server: "http://st.tarr.hu/",
                        dlURL: "garbage.php",
                        ulURL: "empty.php",
                        pingURL: "empty.php",
                        getIpURL: "getIP.php",
                        location: {
                            city: "Budapest",
                            region: "",
                            country: "Hungary",
                            org: "Tarr"
                        }
                    },
                    {
                        name: "Vienna, Austria (Easyname)",
                        server: "http://speedtest.easyname.com/",
                        dlURL: "garbage.php",
                        ulURL: "empty.php",
                        pingURL: "empty.php",
                        getIpURL: "getIP.php",
                        location: {
                            city: "Vienna",
                            region: "",
                            country: "Austria",
                            org: "Easyname"
                        }
                    },
                    {
                        name: "Prague, Czech Republic (O2)",
                        server: "http://speedtest.o2.cz/",
                        dlURL: "garbage.php",
                        ulURL: "empty.php",
                        pingURL: "empty.php",
                        getIpURL: "getIP.php",
                        location: {
                            city: "Prague",
                            region: "",
                            country: "Czech Republic",
                            org: "O2"
                        }
                    },
                    {
                        name: "Munich, Germany (M-net)",
                        server: "http://speedtest.m-net.de/",
                        dlURL: "garbage.php",
                        ulURL: "empty.php",
                        pingURL: "empty.php",
                        getIpURL: "getIP.php",
                        location: {
                            city: "Munich",
                            region: "",
                            country: "Germany",
                            org: "M-net"
                        }
                    }
                ];
                
                setServers(staticLibreSpeedServers);
                
                // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –≤—ã–±–µ—Ä–µ–º –ª—É—á—à–∏–π
                try {
                    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...');
                    const availableServers: LibreSpeedServer[] = [];
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ 
                    for (const server of staticLibreSpeedServers) {
                        const isAvailable = await checkServerAvailability(server.server);
                        if (isAvailable) {
                            console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä ${server.name} –¥–æ—Å—Ç—É–ø–µ–Ω`);
                            availableServers.push(server);
                        }
                    }
                    
                    if (availableServers.length > 0) {
                        console.log(`üî¢ –ù–∞–π–¥–µ–Ω–æ ${availableServers.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤`);
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
                        setServers(availableServers);
                        
                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                        if (!selectedServer) {
                            const bestServer = findBestServer(availableServers, geolocationData?.country);
                            setSelectedServer(bestServer);
                            console.log(`üåç –í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: ${bestServer.name}`);
                        }
                    } else {
                        console.log('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫');
                        if (!selectedServer && staticLibreSpeedServers.length > 0) {
                            const bestServer = findBestServer(staticLibreSpeedServers, geolocationData?.country);
                            setSelectedServer(bestServer);
                        }
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
                    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    if (!selectedServer && staticLibreSpeedServers.length > 0) {
                        const bestServer = findBestServer(staticLibreSpeedServers, geolocationData?.country);
                        setSelectedServer(bestServer);
                    }
                }
                
                // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤
                setCheckingServers(false);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ LibreSpeed:', error);
                
                // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if (!selectedServer && servers.length > 0) {
                    setSelectedServer(servers[0]);
                }
            }
        };
        
        fetchServers();
    }, [findBestServer, geolocationData?.country]);
    
    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ LibreSpeed
    const runLibreSpeedTest = useCallback(async () => {
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        if (!selectedServer) {
            console.error('LibreSpeed test cancelled - no server selected');
            return null;
        }

        console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ LibreSpeed –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${selectedServer.name}`);
        
        try {
            setIsRunning(true);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ LibreSpeed
            // –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å CORS
            const response = await fetch(`${LIBRESPEED_ENDPOINT}/test`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    server: selectedServer
                })
            });
            
            if (response.ok) {
                const responseData = await response.json();
                console.log('‚úÖ –¢–µ—Å—Ç LibreSpeed –∑–∞–≤–µ—Ä—à–µ–Ω:', {
                    download: `${responseData.result.download.toFixed(2)} Mbps`,
                    upload: `${responseData.result.upload.toFixed(2)} Mbps`,
                    ping: `${responseData.result.ping.toFixed(2)} ms`,
                    jitter: `${responseData.result.jitter ? responseData.result.jitter.toFixed(2) : 0} ms`,
                    server: responseData.result.server || selectedServer.name
                });
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —É—á–∏—Ç—ã–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                const result = responseData.success && responseData.result ? responseData.result : responseData;
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç SpeedTestResult
                const speedTestResult: SpeedTestResult = {
                    download: result.download,
                    upload: result.upload,
                    ping: {
                        avg: result.ping,
                        min: result.ping - (result.jitter / 2) || result.ping,
                        max: result.ping + (result.jitter / 2) || result.ping,
                        jitter: result.jitter
                    },
                    jitter: result.jitter,
                    ip: result.ip,
                    isp: result.isp,
                    server: selectedServer,
                    timestamp: new Date().toISOString()
                };
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                setResult(speedTestResult);
                setLibreSpeedResult(speedTestResult);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–∫–∂–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                setDownloadSpeed(result.download.toFixed(2));
                setUploadSpeed(result.upload.toFixed(2));
                setPingStats({
                    avg: result.ping,
                    min: result.ping - (result.jitter / 2) || result.ping,
                    max: result.ping + (result.jitter / 2) || result.ping, 
                    jitter: result.jitter
                });
                
                return speedTestResult;
            } else {
                console.error('LibreSpeed test failed:', await response.text());
                return null;
            }
        } catch (error) {
            console.error('Error during LibreSpeed test:', error);
            return null;
        } finally {
            setIsRunning(false);
        }
    }, [selectedServer]);
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    const runSpeedTest = async () => {
        // –ï—Å–ª–∏ —Ç–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º—Å—è
        if (isRunning || testInProgressRef.current) {
            return null;
        }

        try {
            testInProgressRef.current = true;
            setIsRunning(true);
            setIsTesting(true);
            setProgress(0);

            // –û–±–Ω—É–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            setResult(null);
            setLibreSpeedResult(null);

            // –®–∞–≥ 1: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
            setProgress(10);
            setCurrentTest('ping');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏
            const testResult = await runLibreSpeedTest();
            
            if (!testResult) {
                throw new Error('–¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å');
            }

            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
            setProgress(100);
            setCurrentTest(null);
            
            return testResult;
        } catch (error) {
            console.error('Error during speed test:', error);
            return null;
        } finally {
            testInProgressRef.current = false;
            setIsRunning(false);
            setIsTesting(false);
        }
    };
    
    return {
        downloadSpeed,
        uploadSpeed,
        pingStats,
        isTesting,
        progress,
        libreSpeedResult,
        runSpeedTest,
        servers,
        selectedServer,
        setSelectedServer,
        isRunning,
        result,
        currentTest,
        checkingServers
    };
};
