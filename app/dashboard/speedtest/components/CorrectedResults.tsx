import React, { useEffect, useRef } from "react";
import { Card, Text, Stack, Group } from "@mantine/core";
import { SpeedTestResult } from "../hooks/utils/types";

export interface CorrectedResultsProps {
  ownTestResult: SpeedTestResult | null;
  libreSpeedResult: SpeedTestResult | null;
  fastComResult: SpeedTestResult | null;
  isTesting?: boolean;
  onResultsCalculated?: (results: {
    ping: { value: number; source: string };
    download: { value: number; source: string };
    upload: { value: number; source: string };
  }) => void;
}

interface CorrectedValue {
  value: number;
  source: string;
}

interface CorrectedResults {
  ping: CorrectedValue;
  download: CorrectedValue;
  upload: CorrectedValue;
}

interface UserLocation {
  city: string;
  region: string;
  country: string;
  ip?: string;
}

const calculateCorrectedResults = (
  ownTest: SpeedTestResult | null,
  libreSpeed: SpeedTestResult | null,
  fastCom: SpeedTestResult | null
): CorrectedResults | null => {
  // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  if (!ownTest && !libreSpeed && !fastCom) {
    return null;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ç–µ—Å—Ç–æ–º
  let corrected: CorrectedResults = {
    ping: { value: Infinity, source: "" },
    download: { value: -Infinity, source: "" },
    upload: { value: -Infinity, source: "" },
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
  if (
    ownTest &&
    ownTest.ping &&
    typeof ownTest.download === "number" &&
    typeof ownTest.upload === "number"
  ) {
    if (ownTest.ping.avg < corrected.ping.value) {
      corrected.ping = { value: ownTest.ping.avg, source: "RychlostNet" };
    }
    if (ownTest.download > corrected.download.value) {
      corrected.download = { value: ownTest.download, source: "RychlostNet" };
    }
    if (ownTest.upload > corrected.upload.value) {
      corrected.upload = { value: ownTest.upload, source: "RychlostNet" };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã LibreSpeed
  if (
    libreSpeed &&
    libreSpeed.ping &&
    typeof libreSpeed.download === "number" &&
    typeof libreSpeed.upload === "number"
  ) {
    if (libreSpeed.ping.avg < corrected.ping.value) {
      corrected.ping = { value: libreSpeed.ping.avg, source: "LibreSpeed" };
    }
    if (libreSpeed.download > corrected.download.value) {
      corrected.download = { value: libreSpeed.download, source: "LibreSpeed" };
    }
    if (libreSpeed.upload > corrected.upload.value) {
      corrected.upload = { value: libreSpeed.upload, source: "LibreSpeed" };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Fast.com
  if (
    fastCom &&
    fastCom.ping &&
    typeof fastCom.download === "number" &&
    typeof fastCom.upload === "number"
  ) {
    if (fastCom.ping.avg < corrected.ping.value) {
      corrected.ping = { value: fastCom.ping.avg, source: "Fast.com" };
    }
    if (fastCom.download > corrected.download.value) {
      corrected.download = { value: fastCom.download, source: "Fast.com" };
    }
    if (fastCom.upload > corrected.upload.value) {
      corrected.upload = { value: fastCom.upload, source: "Fast.com" };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (
    corrected.ping.value === Infinity ||
    corrected.download.value === -Infinity ||
    corrected.upload.value === -Infinity
  ) {
    return null;
  }

  return corrected;
};

export const CorrectedResults: React.FC<CorrectedResultsProps> = ({
  ownTestResult,
  libreSpeedResult,
  fastComResult,
  isTesting = false,
  onResultsCalculated,
}) => {
  const correctedResults = calculateCorrectedResults(
    ownTestResult,
    libreSpeedResult,
    fastComResult
  );

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª–∏ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const resultsSentRef = useRef(false);
  // –•—Ä–∞–Ω–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const prevResultsRef = useRef<string | null>(null);

  useEffect(() => {
    if (
      correctedResults &&
      correctedResults.ping &&
      correctedResults.download &&
      correctedResults.upload &&
      onResultsCalculated
    ) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const currentResultsString = JSON.stringify({
        ping: correctedResults.ping.value,
        download: correctedResults.download.value,
        upload: correctedResults.upload.value,
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö
      // –∏ –Ω–µ –±—ã–ª–∏ –ª–∏ –æ–Ω–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
      if (
        currentResultsString !== prevResultsRef.current &&
        !resultsSentRef.current
      ) {
        console.log("Displaying results: ", correctedResults);
        onResultsCalculated(correctedResults);

        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        resultsSentRef.current = true;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
        prevResultsRef.current = currentResultsString;
      }
    }
  }, [correctedResults, onResultsCalculated]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    resultsSentRef.current = false;
  }, [ownTestResult, libreSpeedResult, fastComResult]);

  if (!correctedResults || isTesting) {
    return (
      <Card
        withBorder
        radius="md"
        style={{ marginBottom: "1rem", backgroundColor: "#1a237e" }}
      >
        <Stack>
          <Text fw={500} size="xl" c="white">
            üìä Speed Test Results
          </Text>
          <Stack gap="xs">
            <Group>
              <Text c="white">
                ‚ö° Ping: {isTesting ? "Measuring..." : "-- ms"}
              </Text>
            </Group>
            <Group>
              <Text c="white">
                ‚¨áÔ∏è Download: {isTesting ? "Measuring..." : "-- Mbps"}
              </Text>
            </Group>
            <Group>
              <Text c="white">
                ‚¨ÜÔ∏è Upload: {isTesting ? "Measuring..." : "-- Mbps"}
              </Text>
            </Group>
          </Stack>
        </Stack>
      </Card>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
  console.log("Displaying results:", correctedResults);

  return (
    <Card
      withBorder
      radius="md"
      style={{ marginBottom: "1rem", backgroundColor: "#1a237e" }}
    >
      <Stack>
        <Text fw={500} size="xl" c="white">
          üìä Speed Test Results
        </Text>
        <Stack gap="xs">
          <Group>
            <Text c="white">
              ‚ö° Ping: {correctedResults.ping.value.toFixed(2)} ms
            </Text>
          </Group>

          <Group>
            <Text c="white">
              ‚¨áÔ∏è Download: {correctedResults.download.value.toFixed(2)} Mbps
            </Text>
          </Group>

          <Group>
            <Text c="white">
              ‚¨ÜÔ∏è Upload: {correctedResults.upload.value.toFixed(2)} Mbps
            </Text>
          </Group>
        </Stack>
      </Stack>
    </Card>
  );
};
