import { useEffect, useState, useRef, useCallback } from "react";
import {
  Card,
  Button,
  Table,
  Text,
  Group,
  Select,
  Progress,
  Stack,
  Alert,
  Code,
  Badge,
} from "@mantine/core";
import { LibreSpeedServer } from "../types/librespeed";
import {
  SimpleSpeedTest,
  TestState,
  SpeedTestProgress,
} from "../lib/SimpleSpeedTest"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–≤–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ Nest.js
interface NestServerResponse {
  success: boolean;
  servers: LibreSpeedServer[];
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
interface ServerWithMeta extends LibreSpeedServer {
  available?: boolean;
  checked?: boolean;
  pingResult?: number; // —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∏–Ω–≥–∞ –≤ –º—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ LibreSpeed
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CORS-–ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —Å–µ—Ä–≤–µ—Ä—ã —Å –±—ç–∫–µ–Ω–¥–∞ Nest.js
 * –¢–µ–ø–µ—Ä—å —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π API LibreSpeed –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 */
export const DirectLibreSpeedTest = () => {
  const [results, setResults] = useState({
    ping: "--",
    jitter: "--",
    download: "--",
    upload: "--",
  });
  const [isRunning, setIsRunning] = useState(false);
  const [testState, setTestState] = useState<TestState>(TestState.WAITING);
  const [servers, setServers] = useState<ServerWithMeta[]>([]);
  const [availableServers, setAvailableServers] = useState<ServerWithMeta[]>(
    []
  );
  const [selectedServer, setSelectedServer] = useState<string | null>(null);
  const [error, setError] = useState("");
  const [errorDetails, setErrorDetails] = useState("");
  const [diagnosticInfo, setDiagnosticInfo] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [isCheckingServers, setIsCheckingServers] = useState(false);
  const [checkProgress, setCheckProgress] = useState(0);
  const [isReady, setIsReady] = useState(false);
  const [retryCount, setRetryCount] = useState(0);
  const speedtestRef = useRef<SimpleSpeedTest | null>(null);
  const isTestStartedRef = useRef(false);
  const activeServerRef = useRef<ServerWithMeta | null>(null);

  // –£—á–µ–±–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã (–∑–∞–ø–∞—Å–Ω—ã–µ, –µ—Å–ª–∏ API –≤–µ—Ä–Ω–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
  const fallbackServers: LibreSpeedServer[] = [
    {
      name: "LibreSpeed.org (–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç)",
      server: "librespeed.org",
      dlURL: "garbage.php",
      ulURL: "empty.php",
      pingURL: "empty.php",
      getIpURL: "getIP.php",
      country: "DE",
    },
    {
      name: "LibreSpeed.org (–†–∏–º)",
      server: "librespeed.org/backend-it",
      dlURL: "garbage.php",
      ulURL: "empty.php",
      pingURL: "empty.php",
      getIpURL: "getIP.php",
      country: "IT",
    },
    {
      name: "LibreSpeed.org (–ù—å—é-–ô–æ—Ä–∫)",
      server: "librespeed.org/backend-nyc",
      dlURL: "garbage.php",
      ulURL: "empty.php",
      pingURL: "empty.php",
      getIpURL: "getIP.php",
      country: "US",
    },
  ];

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–µ–π
  const normalizePath = (server: ServerWithMeta, path: string): string => {
    // –ï—Å–ª–∏ –ø—É—Ç—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'backend/', –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å–Ω–æ–≤–∞
    if (path.includes("backend/")) {
      return path;
    }

    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç 'backend' –≤ URL –∏–ª–∏ –∏–º–µ–Ω–∏, –¥–æ–±–∞–≤–ª—è–µ–º 'backend/' –∫ –ø—É—Ç–∏
    if (
      server.server.includes("backend") ||
      server.name.toLowerCase().includes("backend")
    ) {
      return `backend/${path}`;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–µ—Ä–≤–µ—Ä–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ URL –¥–ª—è dl/ul/ping –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –ø—É—Ç–∏
    if (path === "garbage.php" && server.dlURL) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ dlURL, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const dlPath = server.dlURL;
      if (dlPath.includes("/")) {
        return dlPath;
      }
    }

    if (path === "empty.php" && server.ulURL) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ ulURL, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const ulPath = server.ulURL;
      if (ulPath.includes("/")) {
        return ulPath;
      }
    }

    if (path === "empty.php" && server.pingURL) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ pingURL, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const pingPath = server.pingURL;
      if (pingPath.includes("/")) {
        return pingPath;
      }
    }

    return path;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  const checkServerAvailability = async (
    server: ServerWithMeta,
    retries = 2
  ): Promise<{ available: boolean; pingTime?: number }> => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API-—ç–Ω–¥–ø–æ–∏–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ Nest API
      try {
        const checkUrl = `/api/speedtest-proxy/check-servers?server=${encodeURIComponent(
          server.server
        )}&noCache=${Date.now()}`;

        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API: ${server.name}`);

        const startTime = performance.now();
        const response = await fetch(checkUrl, {
          method: "GET",
          headers: {
            "Cache-Control": "no-cache",
            Pragma: "no-cache",
          },
        });
        const endTime = performance.now();
        const pingTime = Math.round(endTime - startTime);

        if (response.ok) {
          const data = await response.json();

          console.log(
            `‚úÖ –°–µ—Ä–≤–µ—Ä ${server.name} –ø—Ä–æ–≤–µ—Ä–µ–Ω: –¥–æ—Å—Ç—É–ø–µ–Ω=${data.available}, –ø–∏–Ω–≥=${pingTime}ms`
          );
          return { available: data.available, pingTime };
        } else {
          console.warn(`‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: ${response.status}`);
        }
      } catch (apiError) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ API: ${apiError}`);
      }

      // –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
      console.log(`üîç –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${server.name}`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      const pingPath = server.pingURL || normalizePath(server, "empty.php");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏
      const url = `/api/speedtest-proxy?path=${encodeURIComponent(
        pingPath
      )}&server=${encodeURIComponent(server.server)}&t=${Date.now()}`;

      console.log(`üîç –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ${server.name}: ${url}`);

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 5 —Å–µ–∫—É–Ω–¥
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);

      const startTime = performance.now();
      const response = await fetch(url, {
        method: "GET",
        signal: controller.signal,
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        headers: {
          "Cache-Control": "no-cache",
          Pragma: "no-cache",
        },
      });
      const endTime = performance.now();
      const pingTime = Math.round(endTime - startTime);

      clearTimeout(timeoutId);
      return { available: response.ok, pingTime };
    } catch (err) {
      console.error(`‚ùå –°–µ—Ä–≤–µ—Ä ${server.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, err);

      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
      if (retries > 0) {
        console.log(
          `üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${server.name}, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${retries}`
        );
        return checkServerAvailability(server, retries - 1);
      }

      return { available: false };
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞ Nest.js –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∞—Å–Ω—ã—Ö
  useEffect(() => {
    const fetchServers = async () => {
      try {
        setIsLoading(true);
        let serverList: LibreSpeedServer[] = [];

        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º API Nest.js –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
          const response = await fetch(
            "http://localhost:3001/api/speedtest/librespeed/servers"
          );

          if (response.ok) {
            const data: NestServerResponse = await response.json();
            if (
              data.success &&
              Array.isArray(data.servers) &&
              data.servers.length > 0
            ) {
              serverList = data.servers;
              console.log(
                "‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å Nest.js –±—ç–∫–µ–Ω–¥–∞:",
                serverList
              );
            } else {
              console.warn(
                "‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã"
              );
              serverList = fallbackServers;
            }
          } else {
            throw new Error(
              `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${response.status}`
            );
          }
        } catch (apiError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API:", apiError);
          console.log("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã");
          serverList = fallbackServers;
        }

        if (serverList.length > 0) {
          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
          const serversWithMeta = serverList.map((server) => ({
            ...server,
            available: undefined,
            checked: false,
            pingResult: undefined,
          }));

          setServers(serversWithMeta);

          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
          setIsCheckingServers(true);
        } else {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤");
        }
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤:", err);
        setError(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É."
        );
        if (err instanceof Error) {
          setErrorDetails(err.message);
        }
      } finally {
        setIsLoading(false);
      }
    };

    fetchServers();
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–∏–Ω–≥—É
  useEffect(() => {
    const checkServers = async () => {
      if (!isCheckingServers || servers.length === 0) return;

      console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤...");

      const availableSrvs: ServerWithMeta[] = [];
      let checkedCount = 0;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
      for (const server of servers) {
        const result = await checkServerAvailability(server);
        server.available = result.available;
        server.pingResult = result.pingTime;
        server.checked = true;

        checkedCount++;
        setCheckProgress(Math.floor((checkedCount / servers.length) * 100));

        if (result.available) {
          console.log(
            `‚úÖ –°–µ—Ä–≤–µ—Ä ${server.name} –¥–æ—Å—Ç—É–ø–µ–Ω (–ø–∏–Ω–≥: ${
              result.pingTime || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            } –º—Å)`
          );
          availableSrvs.push(server);
        } else {
          console.log(`‚ùå –°–µ—Ä–≤–µ—Ä ${server.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –ø–∏–Ω–≥—É (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
      const sortedServers = [...availableSrvs].sort((a, b) => {
        // –ï—Å–ª–∏ —É –æ–±–æ–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏–Ω–≥–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∏–º
        if (a.pingResult !== undefined && b.pingResult !== undefined) {
          return a.pingResult - b.pingResult;
        }
        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —É –æ–¥–Ω–æ–≥–æ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∏–Ω–≥–∞, –æ–Ω –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º
        if (a.pingResult !== undefined) return -1;
        if (b.pingResult !== undefined) return 1;
        // –ï—Å–ª–∏ –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
        return 0;
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
      setAvailableServers(sortedServers);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π (—Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –ø–∏–Ω–≥–æ–º)
      if (sortedServers.length > 0) {
        setSelectedServer(sortedServers[0].server);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${sortedServers.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤`);
      } else {
        console.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤!");
        setError(
          "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      }

      setIsCheckingServers(false);
    };

    checkServers();
  }, [isCheckingServers, servers]);

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    if (selectedServer && availableServers.length > 0) {
      configureSpeedtest();
    }
  }, [selectedServer, availableServers]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
  const configureSpeedtest = () => {
    if (!selectedServer) return;

    const serverObj = availableServers.find((s) => s.server === selectedServer);

    if (!serverObj) {
      console.error(
        "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ ref –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    activeServerRef.current = serverObj;

    console.log(
      `üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${serverObj.name} (${serverObj.server})`
    );

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö backend/ –ø—É—Ç–µ–π
    const dlPath = serverObj.dlURL || normalizePath(serverObj, "garbage.php");
    const ulPath = serverObj.ulURL || normalizePath(serverObj, "empty.php");
    const pingPath = serverObj.pingURL || normalizePath(serverObj, "empty.php");
    const ipPath = serverObj.getIpURL || normalizePath(serverObj, "getIP.php");

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç—è—Ö
    console.log(
      `üìÇ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º: dl=${dlPath}, ul=${ulPath}, ping=${pingPath}`
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –∫ URL –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    const cacheBuster = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–µ—Ä–≤–µ—Ä–∞ "backend" –≤ –∏–º–µ–Ω–∏ –¥–æ–º–µ–Ω–∞
    const serverHasBackendInName =
      serverObj.server.includes(".backend.") ||
      serverObj.server.includes("/backend");

    console.log(
      `üìä –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–µ—Ä–∞: –∏–º–µ–µ—Ç backend –≤ –∏–º–µ–Ω–∏=${serverHasBackendInName}`
    );

    // –í–∞–∂–Ω–æ: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    // URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (download)
    const downloadUrl = `/api/speedtest-proxy?path=${encodeURIComponent(
      dlPath
    )}&server=${encodeURIComponent(serverObj.server)}&t=${cacheBuster}`;

    // URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ (upload)
    const uploadUrl = `/api/speedtest-proxy?path=${encodeURIComponent(
      ulPath
    )}&server=${encodeURIComponent(serverObj.server)}&t=${cacheBuster}`;

    // URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏–Ω–≥–∞
    const pingUrl = `/api/speedtest-proxy?path=${encodeURIComponent(
      pingPath
    )}&server=${encodeURIComponent(serverObj.server)}&t=${cacheBuster}`;

    // URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    const ipUrl = `/api/speedtest-proxy?path=${encodeURIComponent(
      ipPath
    )}&server=${encodeURIComponent(serverObj.server)}&t=${cacheBuster}`;

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üåê URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${downloadUrl}`);
    console.log(`üåê URL –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏: ${uploadUrl}`);
    console.log(`üåê URL –¥–ª—è –ø–∏–Ω–≥–∞: ${pingUrl}`);

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∏–Ω—Å—Ç–∞–Ω—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª—è–µ–º –µ–≥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
    if (speedtestRef.current) {
      try {
        speedtestRef.current.abort();
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
      }
      speedtestRef.current = null;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Å—Ç–∞–Ω—Å SimpleSpeedTest
    try {
      speedtestRef.current = new SimpleSpeedTest({
        url_dl: downloadUrl,
        url_ul: uploadUrl,
        url_ping: pingUrl,
        url_getIp: ipUrl,
        test_order: "P_D_U", // –ò–∑–º–µ–Ω–µ–Ω –ø–æ—Ä—è–¥–æ–∫ —Ç–µ—Å—Ç–æ–≤: ping, download, upload
        time_dl_max: 10, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        time_ul_max: 15, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–±—ã–ª–æ 30)
        count_ping: 10, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–Ω–≥–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        time_auto: true, // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ—Å—Ç–∞
        xhr_dlMultistream: 3, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        xhr_ulMultistream: 3, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏
        xhr_ignoreErrors: 1, // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–µ–ª–∫–∏–µ –æ—à–∏–±–∫–∏
        overheadCompensationFactor: 1.06, // –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏–Ω–≥–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
      fetch(pingUrl, {
        method: "GET",
        headers: { "Cache-Control": "no-cache" },
      })
        .then((response) => {
          if (response.ok) {
            console.log("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–∞");
          } else {
            console.warn(
              `‚ö†Ô∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç–∞—Ç—É—Å: ${response.status}`
            );
          }
          setIsReady(true);
        })
        .catch((err) => {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏–Ω–≥–∞:", err);
          // –í—Å—ë —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
          setDiagnosticInfo(
            (prev) =>
              prev + "\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"
          );
          setIsReady(true);
        });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–µ—Å—Ç–∞:", error);
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏");
      if (error instanceof Error) {
        setErrorDetails(error.message);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
  const startTest = () => {
    if (!speedtestRef.current || !isReady) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç: —Ç–µ—Å—Ç –Ω–µ –≥–æ—Ç–æ–≤");
      return;
    }

    setIsRunning(true);
    isTestStartedRef.current = true;

    const speedtest = speedtestRef.current;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    setError("");
    setErrorDetails("");
    setResults({
      ping: "--",
      jitter: "--",
      download: "--",
      upload: "--",
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞
    speedtest.onupdate = (data: SpeedTestProgress) => {
      console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", data);

      setTestState(data.testState);

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const stateNames = [
        "WAITING",
        "PING",
        "DOWNLOAD",
        "UPLOAD",
        "FINISHED",
        "ABORTED",
      ];
      const stateName = stateNames[data.testState] || String(data.testState);
      setDiagnosticInfo(`–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${stateName}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      setResults({
        ping: data.pingStatus || "--",
        jitter: data.jitterStatus || "--",
        download: data.dlStatus || "--",
        upload: data.ulStatus || "--",
      });
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    speedtest.onend = (aborted: boolean) => {
      console.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω${aborted ? " (–ø—Ä–µ—Ä–≤–∞–Ω)" : ""}`);

      setIsRunning(false);
      isTestStartedRef.current = false;

      if (aborted) {
        setError("–¢–µ—Å—Ç –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω.");
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const finalResults = speedtest.getResults();
      console.log("üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:", finalResults);
    };

    try {
      console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ SimpleSpeedTest");

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
      speedtest.start();
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞:", err);
      setError(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
      );
      if (err instanceof Error) {
        setErrorDetails(err.message);
      }
      setIsRunning(false);
      isTestStartedRef.current = false;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ—Å—Ç–∞
  const abortTest = () => {
    if (!speedtestRef.current || !isRunning) return;

    speedtestRef.current.abort();
    isTestStartedRef.current = false;
    setIsRunning(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  const handleServerChange = (value: string | null) => {
    if (value) {
      setSelectedServer(value);
      setIsReady(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
    }
  };

  return (
    <Card withBorder shadow="sm" padding="md" radius="md">
      <Group justify="space-between" mb="xs">
        <Text fw={500}>LibreSpeed Test</Text>
        {!isLoading && !isCheckingServers && availableServers.length > 0 && (
          <Group gap="sm">
            <Select
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä"
              value={selectedServer}
              onChange={handleServerChange}
              data={availableServers.map((server) => ({
                value: server.server,
                label: `${server.name} ${
                  server.pingResult ? `(${server.pingResult}ms)` : ""
                }`,
              }))}
              disabled={isRunning}
              w={250}
            />
            {selectedServer && (
              <Badge color="blue">
                {availableServers.find((s) => s.server === selectedServer)
                  ?.country || ""}
              </Badge>
            )}
          </Group>
        )}
      </Group>

      {error && (
        <Alert color="red" title="–û—à–∏–±–∫–∞" withCloseButton={false} mb="sm">
          {error}
          {errorDetails && (
            <Code block mt="xs" style={{ whiteSpace: "pre-wrap" }}>
              {errorDetails}
            </Code>
          )}
        </Alert>
      )}

      {isLoading && (
        <Text size="sm" c="dimmed">
          –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...
        </Text>
      )}

      {isCheckingServers && (
        <Stack gap="xs">
          <Text size="sm" c="dimmed">
            –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...
          </Text>
          <Progress value={checkProgress} size="sm" radius="xl" />
        </Stack>
      )}

      {!isLoading &&
        !isCheckingServers &&
        availableServers.length === 0 &&
        !error && (
          <Text size="sm" c="dimmed">
            –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
          </Text>
        )}

      {!isLoading &&
        !isCheckingServers &&
        !isReady &&
        availableServers.length > 0 &&
        !error && (
          <Text size="sm" c="dimmed">
            –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É...
          </Text>
        )}

      <Group mt="md">
        {isReady && !isRunning && (
          <Button
            onClick={startTest}
            disabled={!isReady || isRunning || availableServers.length === 0}
            size="sm"
            color="blue"
          >
            –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç LibreSpeed
          </Button>
        )}
        {isRunning && (
          <Button onClick={abortTest} size="sm" color="red">
            –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
          </Button>
        )}
      </Group>

      {diagnosticInfo && (
        <Alert mt="sm" color="blue" title="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞" withCloseButton={false}>
          {diagnosticInfo}
          {retryCount > 0 && (
            <Text size="sm" mt="xs">
              –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {retryCount}
            </Text>
          )}
        </Alert>
      )}

      <Table mt="md">
        <tbody>
          <tr>
            <td>Ping</td>
            <td>
              <Text fw={500}>{results.ping} ms</Text>
            </td>
          </tr>
          <tr>
            <td>Jitter</td>
            <td>
              <Text fw={500}>{results.jitter} ms</Text>
            </td>
          </tr>
          <tr>
            <td>Download</td>
            <td>
              <Text fw={500}>{results.download} Mbps</Text>
            </td>
          </tr>
          <tr>
            <td>Upload</td>
            <td>
              <Text fw={500}>{results.upload} Mbps</Text>
            </td>
          </tr>
        </tbody>
      </Table>

      <Text size="xs" c="dimmed" mt="sm">
        * –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –º–µ–∂–¥—É –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
        —á–µ—Ä–µ–∑ CORS-–ø—Ä–æ–∫—Å–∏
      </Text>
    </Card>
  );
};

export default DirectLibreSpeedTest;
