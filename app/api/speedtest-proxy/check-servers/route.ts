import { NextRequest, NextResponse } from "next/server";

/**
 * API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ LibreSpeed —á–µ—Ä–µ–∑ Nest.js –±—ç–∫–µ–Ω–¥
 * –í —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Nest.js, –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
 */
export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const server = searchParams.get("server");
  const noCache = searchParams.get("noCache") || Date.now().toString();

  if (!server) {
    return NextResponse.json(
      { error: "–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä server" },
      { status: 400 }
    );
  }

  try {
    // –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ API Nest.js –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    const nestUrl = `http://localhost:3001/api/speedtest/librespeed/check?server=${
      encodeURIComponent(server)
    }&noCache=${noCache}`;

    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ Nest API: ${server}`);

    const response = await fetch(nestUrl, {
      method: "GET",
      headers: {
        "Cache-Control": "no-cache",
        "Pragma": "no-cache"
      },
      next: { revalidate: 0 }
    });

    // –ï—Å–ª–∏ Nest API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –æ—Ç–≤–µ—Ç
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Nest API: ${JSON.stringify(data)}`);
      
      return NextResponse.json(data, {
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type",
          "Cache-Control": "no-store, max-age=0"
        }
      });
    } else {
      throw new Error(`Nest API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status}`);
    }
  } catch (nestError) {
    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Nest API: ${nestError}`);
    
    // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏
    try {
      const proxyUrl = `/api/speedtest-proxy?path=empty.php&server=${
        encodeURIComponent(server)
      }&t=${Date.now()}`;
      
      console.log(`üîÑ –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${proxyUrl}`);
      
      const proxyResponse = await fetch(new URL(proxyUrl, request.url), {
        method: "GET",
        headers: {
          "Cache-Control": "no-cache",
          "Pragma": "no-cache"
        }
      });
      
      return NextResponse.json({ 
        available: proxyResponse.ok,
        proxyCheck: true
      }, {
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type",
          "Cache-Control": "no-store, max-age=0"
        }
      });
    } catch (proxyError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${proxyError}`);
      
      // –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      return NextResponse.json({ 
        error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–µ—Ä–∞",
        available: false,
        details: String(nestError)
      }, { 
        status: 500,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type"
        }
      });
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS
 */
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 204,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, X-Requested-With",
      "Access-Control-Max-Age": "86400",
    },
  });
} 