import { NextRequest, NextResponse } from "next/server";

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º LibreSpeed
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å CORS –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
 */
export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const path = searchParams.get("path") || "empty.php";
  const server = searchParams.get("server");

  if (!server) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: –Ω–µ —É–∫–∞–∑–∞–Ω —Å–µ—Ä–≤–µ—Ä");
    return NextResponse.json(
      { error: "–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä server" },
      { status: 400 }
    );
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ –±–ª–æ–∫–∞ try-catch
  let fullUrl = getFullUrl(server, path);

  try {
    console.log(`üîÑ –ü—Ä–æ–∫—Å–∏ GET: ${fullUrl}`);

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    if (path.includes("garbage.php")) {
      console.log(`üìä –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏: ${fullUrl}`);
    }

    // –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const headers = new Headers();
    const headersToForward = [
      "accept",
      "content-type",
      "user-agent",
      "referer"
    ];

    headersToForward.forEach((header) => {
      const value = request.headers.get(header);
      if (value) headers.set(header, value);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    headers.set("Cache-Control", "no-store, no-cache, must-revalidate");
    headers.set("Pragma", "no-cache");
    headers.set("Expires", "0");

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
      const response = await fetch(fullUrl, {
        method: "GET",
        headers,
        cache: "no-store",
        signal: controller.signal,
      });

      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
      clearTimeout(timeoutId);

      if (!response.ok) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${response.status}: ${response.statusText}`);
        throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} ${response.statusText}`);
      }

      // –î–ª—è garbage.php –ª–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –∏ —Ç–∏–ø–µ –¥–∞–Ω–Ω—ã—Ö
      if (path.includes("garbage.php")) {
        const contentLength = response.headers.get("Content-Length");
        const contentType = response.headers.get("Content-Type");
        console.log(`üì¶ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è garbage.php: Content-Length=${contentLength}, Content-Type=${contentType}`);
        
        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –µ–≥–æ —Ä–∞–∑–º–µ—Ä, –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        const clonedResponse = response.clone();
        const arrayBuffer = await clonedResponse.arrayBuffer();
        console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${arrayBuffer.byteLength} –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è garbage.php`);
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å CORS-–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      const responseBody = await response.blob();
      const newResponse = new NextResponse(responseBody, {
        status: response.status,
        statusText: response.statusText,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, X-Requested-With",
          "Content-Type": response.headers.get("Content-Type") || "text/plain",
          "Cache-Control": "no-store, no-cache, must-revalidate",
          "Pragma": "no-cache",
          "Expires": "0"
        },
      });

      return newResponse;
    } catch (fetchError) {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      clearTimeout(timeoutId);
      throw fetchError;
    }
  } catch (error) {
    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ GET:", error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    const errorStack = error instanceof Error ? error.stack : null;
    const isTimeoutError = error instanceof Error && error.name === 'AbortError';
    
    console.error("üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:", {
      url: fullUrl,
      error: errorMessage,
      stack: errorStack,
      type: typeof error,
      isTimeout: isTimeoutError
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    return NextResponse.json({
      error: isTimeoutError ? "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞" : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
      details: errorMessage,
      url: fullUrl
    }, {
      status: isTimeoutError ? 504 : 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, X-Requested-With",
        "Cache-Control": "no-store, no-cache, must-revalidate",
        "Pragma": "no-cache",
        "Expires": "0"
      },
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ (upload)
 */
export async function POST(request: NextRequest) {
  const { searchParams } = new URL(request.url);
  const path = searchParams.get("path") || "empty.php";
  const server = searchParams.get("server");

  if (!server) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: –Ω–µ —É–∫–∞–∑–∞–Ω —Å–µ—Ä–≤–µ—Ä");
    return NextResponse.json(
      { error: "–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä server" },
      { status: 400 }
    );
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ –±–ª–æ–∫–∞ try-catch
  let fullUrl = getFullUrl(server, path);

  try {
    console.log(`üîÑ –ü—Ä–æ–∫—Å–∏ POST: ${fullUrl}`);

    // –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const headers = new Headers();
    const headersToForward = [
      "accept",
      "content-type",
      "user-agent",
      "referer"
    ];

    headersToForward.forEach((header) => {
      const value = request.headers.get(header);
      if (value) headers.set(header, value);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    headers.set("Cache-Control", "no-store, no-cache, must-revalidate");
    headers.set("Pragma", "no-cache");
    headers.set("Expires", "0");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.blob();

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
      const response = await fetch(fullUrl, {
        method: "POST",
        headers,
        body,
        cache: "no-store",
        signal: controller.signal,
      });

      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
      clearTimeout(timeoutId);

      if (!response.ok) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª ${response.status}: ${response.statusText}`);
        throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.status} ${response.statusText}`);
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å CORS-–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      const responseBody = await response.blob();
      const newResponse = new NextResponse(responseBody, {
        status: response.status,
        statusText: response.statusText,
        headers: {
          "Access-Control-Allow-Origin": "*",
          "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
          "Access-Control-Allow-Headers": "Content-Type, X-Requested-With",
          "Content-Type": response.headers.get("Content-Type") || "text/plain",
          "Cache-Control": "no-store, no-cache, must-revalidate",
          "Pragma": "no-cache",
          "Expires": "0"
        },
      });

      return newResponse;
    } catch (fetchError) {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      clearTimeout(timeoutId);
      throw fetchError;
    }
  } catch (error) {
    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ POST:", error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    const errorStack = error instanceof Error ? error.stack : null;
    const isTimeoutError = error instanceof Error && error.name === 'AbortError';
    
    console.error("üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:", {
      url: fullUrl,
      error: errorMessage,
      stack: errorStack,
      type: typeof error,
      isTimeout: isTimeoutError
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    return NextResponse.json({
      error: isTimeoutError ? "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞" : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
      details: errorMessage,
      url: fullUrl
    }, {
      status: isTimeoutError ? 504 : 500,
      headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type, X-Requested-With",
        "Cache-Control": "no-store, no-cache, must-revalidate",
        "Pragma": "no-cache",
        "Expires": "0"
      },
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS
 */
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 204,
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, X-Requested-With",
      "Access-Control-Max-Age": "86400",
      "Cache-Control": "no-store, no-cache, must-revalidate",
      "Pragma": "no-cache",
      "Expires": "0"
    },
  });
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –ø—É—Ç–µ–π
 */
function getFullUrl(server: string, path: string): string {
  // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ —Å–ª–µ—à–∏ –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞
  const cleanServer = server.replace(/\/+$/, '');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª
  const hasProtocol = cleanServer.startsWith('http://') || cleanServer.startsWith('https://');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—è https
  const serverWithProtocol = hasProtocol ? cleanServer : `https://${cleanServer}`;
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å
  let finalPath = path;
  // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/", –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
  if (!finalPath.startsWith('/')) {
    finalPath = `/${finalPath}`;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å "backend" –∫ –ø—É—Ç–∏
  const needsBackendPrefix = !serverWithProtocol.includes('.backend.') && 
                            !serverWithProtocol.includes('/backend') &&
                            !finalPath.includes('backend/') && 
                            !finalPath.startsWith('/backend/');
  
  // –î–æ–±–∞–≤–ª—è–µ–º "/backend" –∫ –ø—É—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (needsBackendPrefix) {
    finalPath = `/backend${finalPath}`;
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL
  console.log(`üîç URL: —Å–µ—Ä–≤–µ—Ä=${serverWithProtocol}, –ø—É—Ç—å=${finalPath}, –¥–æ–±–∞–≤–ª–µ–Ω prefix backend=${needsBackendPrefix}`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–±–ª–µ–º —Å CORS
  const cacheBuster = Date.now();
  let finalUrl = `${serverWithProtocol}${finalPath}`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ URL
  finalUrl += finalPath.includes('?') ? '&' : '?';
  finalUrl += `cors=true&_=${cacheBuster}`;
  
  return finalUrl;
} 